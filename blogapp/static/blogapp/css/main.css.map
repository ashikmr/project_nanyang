{"version":3,"file":"css/main.css","mappings":";;;AAAA,gBAAgB;ACChB;;;;CAAA;AAQA;;;CAAA;AAIA;EACC;EACA;ADFD;;ACKA;;;EAGC;UAAA;ADFD;;ACUA;;;CAAA;AAIA;EACC;EACA;ADPD;;ACYA;;;CAAA;AAIA;EAEC;ADVD;;ACaA;;CAAA;AAGA;;;;EAIC;ADVD;;ACeA;;CAAA;AAGA;EACC;ADZD;;ACeA;;CAAA;AAGA;EACC;EACA;ADZD;;ACeA;EACC;ADZD;;ACeA;EACC;ADZD;;ACeA;;CAAA;AAGA;EACC;EACA;ADZD;;ACgBA;;CAAA;AAGA;;;;EAIC;ADbD;;ACgBA;;;;CAAA;AAKA;;;;;;;EAOC;ADbD;;AE1FA;;;;;CAAA;ACZA;;;;;;;CAAA;ACAA;;;;;;;EAAA;ACyBA;;;;;;;;;;;;CAAA;AAkBA;;CAAA;AASA;;;;;;;CAAA;AAcA;;;;;;;;CAAA;AAiCA;;CAAA;AA4BA;;;;;;;;;;CAAA;AAkBA;;;;;;;;;;;;;;CAAA;AAoBA;;CAAA;AASA;;CAAA;AC9KA;;;;;;;CAAA;ACCA;;;;;;;;EAAA;AAYA;;;;;;;EAAA;AAUA;AAGA;EACE;EFqBD;EAAA;EAAA;EAcA,yBElC+B;MFkC/B,sBElC+B;UFkC/B,mBElC+B;EAC9B;MAAA;EFRD,0CHda;EGeb;EGmRO;EDxQN;ECwQM;ARnER;AQ/FI;ED7GJ;ICsRQ;ERtEN;AACF;AQpGI;ED7GJ;ICsRQ;ERjEN;AACF;AO1ME;EACE;EF2IF;EAAA;ALkEF;AO3MI;EACE;AP6MN;AOzME;EFED;EAAA;EAAA;EAcA,yBERiC;MFQjC,sBERiC;UFQjC,mBERiC;EAC9B;MAAA;EAGA;APmMJ;AO3MI;EAJF;IAKI;EP8MJ;AACF;AOrMI;EACG;APuMP;AOnMI;EACE;APqMN;AOhME;EAEE;EACA;APiMJ;AO7LE;EACE;AP+LJ;AO9LI;EAFF;IAGI;EPiMJ;AACF;AO7LE;EACE;EACA;EACA;EACA;EACA;EFsFF;EAAA;AL0GF;AO7LI;EACE;EACA;AP+LN;AO1LE;ECmMM;ARNR;AQ5JI;EDjCF;IC0MM;ERTN;AACF;AO7LE;EACE;AP+LJ;AO3LE;EFkEA;EAAA;AL4HF;AO3LI;EACE;AP6LN;;AS5SA;;;;;;;EAAA;AAWA;EAEE;AT2SF;AS1SE;EAHF;IAII;IJ4BH;IAAA;IAAA;IA6BA,yBIxDqC;QJwDrC,6BIxDqC;IAClC;QAAA;YAAA;IACA;IACA;IACA;;;;;KAAA;IAMA;IACA;IACA;IACA;IACA;8BAAA;IAEA;IJhBH,0CHda;IGeb,gBHCM;IMkRC;IChQJ;ET8SF;AACF;AQjNI;ECvHJ;IDgSQ;ER4CN;AACF;AS1UE;EAuBE;IJMH;IAAA;IAAA;IAmCA;QAAA;YAAA;IACA;QAAA;YAAA;IIvCK;mBAAA;IAEA;IAAA;QAAA;YAAA;IACA;IACA;IJiIJ;IAAA;II3HI;ETmTJ;ESvTI;IACE;ETyTN;ESrTI;IACE;ETuTN;AACF;;AU5WA;;;;;;;EAAA;AAaA;EACE;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA;IAAA;IACA;IAAA;QAAA;YAAA;IACA;IACA;QAAA;YAAA;IACA;IACA;IACA;IACA;IACA;IACA;EV0WF;EUvWA;EACA;IACE;IACA;IACA;IACA;oDAAA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IL4HF;IAAA;EL8OA;EUxWE;IACE;EV0WJ;AACF;AApaA;;;;;;;;;;;;;;EAAA,C","sources":["webpack://project_nanyang/./src/scss/style.scss","webpack://project_nanyang/./src/scss/core/_reset_styles.scss","webpack://project_nanyang/./src/scss/core/_fonts.scss","webpack://project_nanyang/./src/scss/core/_index.scss","webpack://project_nanyang/./src/scss/abstracts/_functions.scss","webpack://project_nanyang/./src/scss/abstracts/_mixins.scss","webpack://project_nanyang/./src/scss/abstracts/_index.scss","webpack://project_nanyang/./src/scss/layout/_navbar.scss","webpack://project_nanyang/./node_modules/rfs/scss.scss","webpack://project_nanyang/./src/scss/layout/_navbar_mobile.scss","webpack://project_nanyang/./src/scss/layout/_sidebar.scss"],"sourcesContent":["/*\n  The @use rule loads mixins, functions, and variables from other Sass stylesheets,\n  and combines CSS from multiple stylesheets together.\n  Stylesheets loaded by @use are called \"modules\".\n  All imported members are namespaced by default.\n\n  @use \"<url>\" as <namespace>\n\n  The @forward rule loads a Sass stylesheet and makes its mixins, functions, and \n  variables available when your stylesheet is loaded with the @use rule. It makes\n  it possible to organize Sass libraries across many files, while allowing their \n  users to load a single entrypoint file.\n\n  @forward \"<url>\"\n */\n\n@use \"./layout/navbar\"; // Desktop navbar layout\n@use \"./layout/navbar_mobile\"; // Mobile navbar layout\n@use \"./layout/sidebar\"; // Mobile side-menu-navbar layout\n","@import \"~rfs/scss\";\r\n/*\r\n The goal of a reset stylesheet is to reduce browser inconsistencies in\r\n things like default line heights, margins and font sizes of headings, and so on.\r\n By resetting your styles, you avoid defaulting to the browserâ€™s built-in styles, which differs from browser to browser.\r\n*/\r\n\r\n// Reset Styles\r\n\r\n/* \r\n       1. a) Remove default margin and border.\r\n          b) Use a more-intuitive box-sizing model.\r\n*/\r\n* {\r\n\tmargin: 0;\r\n\tborder: 0;\r\n}\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n\tbox-sizing: border-box;\r\n}\r\n\r\n// body,\r\n// html {\r\n// \t-webkit-font-smoothing: antialiased;\r\n// }\r\n\r\n/* \r\n\t2.For rem-unit it converts in decimal.\r\n                2.4rem = 2.4 * 10px = 24px;\r\n*/\r\nhtml {\r\n\tfont-size: 62.5%;\r\n\tposition: relative;\r\n\t// Addin smooth-scroll behavior.\r\n\t// scroll-behavior: smooth;\r\n}\r\n\r\n/* \r\n\t3.a)Fixed margin-top for navbar.\t\r\n\t\tb)Add accessible line-height\r\n*/\r\nbody {\r\n\t// @include rfs(6.4rem, margin-top);\r\n\tline-height: 1.5;\r\n}\r\n\r\n/* \r\n\t4. Setting appropriate line-height for all <h> elements.\r\n*/\r\nh1,\r\nh2,\r\nh3,\r\nh4 {\r\n\tline-height: 1.05;\r\n\t// character unit\r\n\t// max-width: 60ch;\r\n}\r\n\r\n/* \r\n\t5. Setting appropriate width for <p> elements.\r\n*/\r\np {\r\n\tmax-width: 60ch;\r\n}\r\n\r\n/* \r\n\t6. Removing default list-styles and link styles\r\n*/\r\nul {\r\n\tlist-style: none;\r\n\tpadding: 0;\r\n}\r\n\r\nli {\r\n\tlist-style: none;\r\n}\r\n\r\na {\r\n\ttext-decoration: none;\r\n}\r\n\r\n/* \r\n\t7.\tImprove media defaults.\r\n*/\r\nimg {\r\n\tmax-width: 100%;\r\n\tdisplay: block;\r\n\t// object-fit: cover;\r\n}\r\n\r\n/* \r\n\t8. Inherit fonts for form controls\r\n*/\r\ninput,\r\nbutton,\r\ntextarea,\r\nselect {\r\n\tfont: inherit;\r\n}\r\n\r\n/* \r\n\t9. Word wrapping.\r\n\tThe overflow-wrap property lets us tweak the line-wrapping algorithm, and\r\n\tgive it permission to use hard wraps when no soft wrap opportunties can be found.\r\n*/\r\np,\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n\toverflow-wrap: break-word;\r\n}\r\n","//\r\n// We'll access fonts variable via sass-mixins.\r\n//\r\n\r\n//\r\n// Font_Family: Source-sans/serif-Pro\r\n//\r\n$s_sans_font: \"Source Sans Pro\", sans-serif;\r\n$s_serif_font: \"Source Serif Pro\", serif;\r\n\r\n// Display Font\r\n// Flood Std Adobe Font\r\n/*  \r\n\tCSS LINK: <link rel=\"stylesheet\" href=\"https://use.typekit.net/fal4wrx.css\">\r\n\tfont-family: flood-std,sans-serif;\r\n\tfont-weight: 400;\r\n\tfont-style: normal;\r\n*/\r\n$display_font: flood-std, sans-serif;\r\n\r\n// Font-weights\r\n$lt: 300; // light\r\n$rg: 400; // regular\r\n$sbld: 600; // semi-bold\r\n$bld: 700; // bold\r\n$bldr: 900; // bolder\r\n","/*\n  The @forward rule loads a Sass stylesheet and makes its mixins, functions,\n  and variables available when your stylesheet is loaded with the @use rule.\n  It makes it possible to organize Sass libraries across many files, while allowing \n  their users to load a single entrypoint file.\n\n  @forward \"<url>\"\n*/\n@forward \"../core/reset_styles\";\n@forward \"../core/colors\";\n@forward \"../core/fonts\";\n","/*\r\n  The @use rule loads mixins, functions, and variables from other Sass stylesheets,\r\n  and combines CSS from multiple stylesheets together.\r\n  Stylesheets loaded by @use are called \"modules\".\r\n  All imported members are namespaced by default.\r\n\r\n  @use \"<url>\" as <namespace>\r\n */\r\n// Loading colors stylesheet and defining its namespace as \"col\"\r\n@use \"../core/colors\" as col;\r\n\r\n// Function for returning primary_black/white colors\r\n// p_color: primary_color\r\n// s_color: secondary_color\r\n\r\n@function p_color($clr, $variant) {\r\n\t@return map-get(map-get(col.$primary, $clr), $variant);\r\n}\r\n\r\n// Function for returning secondary_black colors\r\n@function s_color($clr, $variant) {\r\n\t@return map-get(map-get(col.$secondary, $clr), $variant);\r\n}\r\n\r\n// Function for $colors map\r\n@function palette($clr, $variant) {\r\n\t@return map-get(map-get(col.$colors, $clr), $variant);\r\n}\r\n","// The @mixin directive lets you create CSS code\r\n// that is to be reused throughout the website.\r\n\r\n// ####### EXPLAINATION #########\r\n// Defining a Mixin\r\n// @mixin name {\r\n//   property: value;\r\n//   property: value;\r\n//   ...\r\n// }\r\n\r\n// Using a Mixin\r\n// selector {\r\n//   @include mixin-name;\r\n// }\r\n\r\n//\r\n// Font-Type: Source-sans/serif-Pro font-family\r\n//\r\n\r\n@mixin font-type($font_type, $weight) {\r\n\tfont-family: $font_type;\r\n\tfont-weight: $weight;\r\n}\r\n\r\n/* \r\n\tTo define width and height in one go.\r\n\r\n\t===== Usage =====\r\n\tdiv {\r\n\t\t// You can pass width && height\r\n\t\t@include box(200px, 300px);\r\n\r\n\t\t// or just pass width and the height will default to the width value \r\n\t\t@include box(200px);\r\n\r\n\t}\r\n*/\r\n@mixin box($width, $height: $width) {\r\n\twidth: $width;\r\n\theight: $height;\r\n}\r\n\r\n/* \r\n\t===== FLEXBOX UTILITIES =====\r\n*/\r\n// 1. Flexbox display\r\n@mixin display_flexbox {\r\n\tdisplay: flex;\r\n}\r\n\r\n// 2. Align items vertically.\r\n/* \r\n\t===== Usage =====\r\n\tdiv {\r\n\t\t@include flex_align_items(center);\r\n\t\t@include flex_align_items(flex-start);\r\n\t\t@include flex_align_items(flex-end);\r\n\t}\r\n*/\r\n@mixin flex_align_items($pos) {\r\n\t@include display_flexbox();\r\n\talign-items: $pos;\r\n}\r\n\r\n// 3. Align items horizontally.\r\n/* \r\n\t===== Usage =====\r\n\tdiv {\r\n\t\t@include flex_justify_content(center);\r\n\t\t@include flex_justify_content(space-between);\r\n\t\t@include flex_justify_content(space-around);\r\n\t\t@include flex_justify_content(space-evenly);\r\n\t}\r\n*/\r\n@mixin flex_justify_content($pos) {\r\n\t@include display_flexbox();\r\n\tjustify-content: $pos;\r\n}\r\n\r\n// 4. Move items to the center of content.\r\n@mixin flex_center {\r\n\t@include display_flexbox();\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n}\r\n\r\n// 5. Set the direction of the flexible items.\r\n@mixin flex-direction($value: row) {\r\n\tflex-direction: $value;\r\n}\r\n\r\n// 6. Flex order\r\n// The order property controls the order in which the flex items appear\r\n// within the flex container.\r\n@mixin flex_order($order) {\r\n\torder: $order;\r\n}\r\n\r\n/* \r\n\t===== GRID_DISPLAY UTILITIES =====\r\n*/\r\n// Ensure CSS grid works with IE 11 spec.\r\n// 1. Grid Display\r\n@mixin display_grid {\r\n\tdisplay: grid;\r\n}\r\n\r\n// 2. Align items vertically.\r\n@mixin grid_align_items($pos: stretch) {\r\n\t@include display_grid();\r\n\talign-items: $pos;\r\n}\r\n\r\n// 3. Align items horizontally.\r\n@mixin grid_justify_content($pos: flex-start) {\r\n\t@include display_grid();\r\n\tjustify-content: $pos;\r\n}\r\n\r\n// 4. Move items to the center of content.\r\n@mixin grid_center {\r\n\t@include display_grid();\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n}\r\n\r\n/*  \r\n\t============================== GRID COLUMNS ===========================\r\n\r\n\tThe grid-template-columns property specifies the number (and the widths) of columns\r\n\tin a grid layout.\r\n\tThe values are a space separated list, where each value specifies the size of the \r\n\trespective column.\r\n\t\r\n\trepeat() tells Grid to create multiple tracks with the same size parameters\r\n\t(not necessarily the same size, though in this case they all end up being the same).\r\n*/\r\n// 1. Even grid columns\r\n@mixin grid_template_columns($cols, $width) {\r\n\t@include display_grid();\r\n\tgrid-template-columns: repeat($cols, $width);\r\n}\r\n\r\n// 2. Grid minmax(min, max)\r\n/*  \r\n\tDefines a size range greater than or equal to min and less than or equal to max.\r\n\r\n\tWe can use minmax() as a value for a grid column or row.\r\n\r\n\t**NOTE: The value for min has to be smaller than the value for max. Fr units canâ€™t be \r\n\tused for the min value, but they can absolutely be used for the max value. In fact, \r\n\tusing a 1fr as the max value will ensure that the track expands and takes up the\r\n\tavailable space:\r\n\t\t\t\t.container {\r\n\t\t\t\t\tdisplay: grid;\r\n\t\t\t\t\tgrid-template-columns: minmax(250px, 1fr) 1fr;\r\n\t\t\t\t}\r\n\r\n*/\r\n@mixin grid_minmax($cols, $min_width, $max_width) {\r\n\t@include display_grid();\r\n\tgrid-template-columns: repeat($cols, minmax($min_width, $max_width));\r\n}\r\n\r\n/*  \r\n\t=============== VENDOR PREFIXES ===================\r\n*/\r\n// 1. Override webkit and mozilla style appearnces for iPhone and iPad.\r\n@mixin override_webkit_inputstyle {\r\n\t-webkit-appearance: none;\r\n\t-moz-appearance: none;\r\n}\r\n\r\n/*  \r\n\t=============== Cross-browser transition support ===================\r\n*/\r\n@mixin transition_support($seconds: 0.4s){\r\n  transition: all $seconds ease-in;\r\n}\r\n\r\n","/*\n  The @forward rule loads a Sass stylesheet and makes its mixins, functions,\n  and variables available when your stylesheet is loaded with the @use rule.\n  It makes it possible to organize Sass libraries across many files, while allowing \n  their users to load a single entrypoint file.\n\n  @forward \"<url>\"\n*/\n@forward \"../abstracts/functions\";\n@forward \"../abstracts/mixins\";\n","// Custom style for blogapp/templates/blogapp/navbar.html\n/*\n../core folder contains colors, fonts and reset_styles scss files. Only reset_styles.scss code will be globally used evrey time.\n\n../core as c is used as a namespace for core sfiles.\n\n../abstracts folder contains animations, functions and mixins.\n\n../abstracts as abs is also used as a namespace for abstracts files.\n */\n@use \"../core\" as c;\n@use \"../abstracts\" as abs;\n\n/*\nRFS is a unit resizing engine which was initially developed to \nresize font sizes (hence its abbreviation for Responsive Font Sizes).\nNowadays RFS is capable of rescaling basically every value for any css \nproperty with units, like margin, padding, border-radius or even box-shadow.\n\nSource: https://www.npmjs.com/package/rfs\n */\n@import \"../../../node_modules/rfs/scss\";\n\n/* NOTE: Mid-navigation style in mobile devices is written in sidebar.scss */\n\n// .navbar --> parent class\n.navbar{\n  background-color: abs.p_color(true_black, base);\n  @include abs.flex_align_items(center);\n  justify-content: space-around;\n  @include abs.font-type(c.$s_sans_font, c.$rg);\n  @include font-size(1.6rem);\n  // Take all the available space horizontally.\n  min-width: 100%;\n  // Height of the navbar.\n  @include rfs(6.4rem, height);\n\n  // Home/Logo text link color\n  &__homelink a{\n    color: abs.palette(beige, bright);\n    @include abs.transition_support();\n    &:hover{\n      color: lighten(abs.palette(beige, bright), 20%);\n    }\n  }\n\n  &__mid_navigation,\n  &__login-search{\n    // Hide mid-navigation and login-search links \n    // for mobile devices.\n    @media (max-width: 768px){\n      display: none;\n    }\n    // aligning navigation links horizontally\n    @include abs.flex_align_items(center);\n    justify-content: space-around;\n\n    // Adding space between letters. \n    letter-spacing: 1px;\n\n    // link-items\n    li{\n       margin: 0 1.6rem; // adding space between the links\n    }\n\n    // Navbar link colors\n    a{\n      color: abs.palette(beige, base);\n    }\n  }\n\n  // Capitalizing mid-section links and log in text.\n  button,\n  &__mid_navigation__links a{\n    text-transform: capitalize;\n    font-weight: 600;\n  }\n\n  // Hide/Show login_btn in desktop_mode/mobile_mode.\n  &__mid_navigation__links--login_mobile_btn{\n    display: none;\n    @media (max-width: 768px){\n      display: block;\n    }\n  }\n  \n  // Login button\n  &__login-search__loginbtn{\n    background-color: rgba(255, 255, 255, 1);\n    color: abs.p_color(true_black, base);\n    border-radius: 0.8rem;\n    padding: 0.6rem 2rem;\n    cursor: pointer;\n    @include abs.transition_support();\n\n    &:hover{\n      background-color: abs.palette(beige, bright);\n      color: rgba(255, 255, 255, 1);\n    }\n  }\n\n  // Search icon\n  &__login-search__search a{\n    @include font-size(2rem);\n  }\n\n  // Sidemenu close button\n  &__sidemenu_closebtn{\n    display: none;\n  }\n\n  // Default animation for mid-navigation and search links\n  &__mid_navigation__links a,\n  &__login-search__search a{\n    @include abs.transition_support();\n    &:hover{\n      color: lighten(abs.palette(beige, base), 40%);\n    }\n  }\n}\n","// stylelint-disable property-blacklist, scss/dollar-variable-default\n\n// SCSS RFS mixin\n//\n// Automated responsive values for font sizes, paddings, margins and much more\n//\n// Licensed under MIT (https://github.com/twbs/rfs/blob/main/LICENSE)\n\n// Configuration\n\n// Base value\n$rfs-base-value: 1.25rem !default;\n$rfs-unit: rem !default;\n\n@if $rfs-unit != rem and $rfs-unit != px {\n  @error \"`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.\";\n}\n\n// Breakpoint at where values start decreasing if screen width is smaller\n$rfs-breakpoint: 1200px !default;\n$rfs-breakpoint-unit: px !default;\n\n@if $rfs-breakpoint-unit != px and $rfs-breakpoint-unit != em and $rfs-breakpoint-unit != rem {\n  @error \"`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.\";\n}\n\n// Resize values based on screen height and width\n$rfs-two-dimensional: false !default;\n\n// Factor of decrease\n$rfs-factor: 10 !default;\n\n@if type-of($rfs-factor) != number or $rfs-factor <= 1 {\n  @error \"`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.\";\n}\n\n// Mode. Possibilities: \"min-media-query\", \"max-media-query\"\n$rfs-mode: min-media-query !default;\n\n// Generate enable or disable classes. Possibilities: false, \"enable\" or \"disable\"\n$rfs-class: false !default;\n\n// 1 rem = $rfs-rem-value px\n$rfs-rem-value: 16 !default;\n\n// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14\n$rfs-safari-iframe-resize-bug-fix: false !default;\n\n// Disable RFS by setting $enable-rfs to false\n$enable-rfs: true !default;\n\n// Cache $rfs-base-value unit\n$rfs-base-value-unit: unit($rfs-base-value);\n\n@function divide($dividend, $divisor, $precision: 10) {\n  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);\n  $dividend: abs($dividend);\n  $divisor: abs($divisor);\n  @if $dividend == 0 {\n    @return 0;\n  }\n  @if $divisor == 0 {\n    @error \"Cannot divide by 0\";\n  }\n  $remainder: $dividend;\n  $result: 0;\n  $factor: 10;\n  @while ($remainder > 0 and $precision >= 0) {\n    $quotient: 0;\n    @while ($remainder >= $divisor) {\n      $remainder: $remainder - $divisor;\n      $quotient: $quotient + 1;\n    }\n    $result: $result * 10 + $quotient;\n    $factor: $factor * .1;\n    $remainder: $remainder * 10;\n    $precision: $precision - 1;\n    @if ($precision < 0 and $remainder >= $divisor * 5) {\n      $result: $result + 1;\n    }\n  }\n  $result: $result * $factor * $sign;\n  $dividend-unit: unit($dividend);\n  $divisor-unit: unit($divisor);\n  $unit-map: (\n    \"px\": 1px,\n    \"rem\": 1rem,\n    \"em\": 1em,\n    \"%\": 1%\n  );\n  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {\n    $result: $result * map-get($unit-map, $dividend-unit);\n  }\n  @return $result;\n}\n\n// Remove px-unit from $rfs-base-value for calculations\n@if $rfs-base-value-unit == px {\n  $rfs-base-value: divide($rfs-base-value, $rfs-base-value * 0 + 1);\n}\n@else if $rfs-base-value-unit == rem {\n  $rfs-base-value: divide($rfs-base-value, divide($rfs-base-value * 0 + 1, $rfs-rem-value));\n}\n\n// Cache $rfs-breakpoint unit to prevent multiple calls\n$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);\n\n// Remove unit from $rfs-breakpoint for calculations\n@if $rfs-breakpoint-unit-cache == px {\n  $rfs-breakpoint: divide($rfs-breakpoint, $rfs-breakpoint * 0 + 1);\n}\n@else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == \"em\" {\n  $rfs-breakpoint: divide($rfs-breakpoint, divide($rfs-breakpoint * 0 + 1, $rfs-rem-value));\n}\n\n// Calculate the media query value\n$rfs-mq-value: if($rfs-breakpoint-unit == px, #{$rfs-breakpoint}px, #{divide($rfs-breakpoint, $rfs-rem-value)}#{$rfs-breakpoint-unit});\n$rfs-mq-property-width: if($rfs-mode == max-media-query, max-width, min-width);\n$rfs-mq-property-height: if($rfs-mode == max-media-query, max-height, min-height);\n\n// Internal mixin used to determine which media query needs to be used\n@mixin _rfs-media-query {\n  @if $rfs-two-dimensional {\n    @if $rfs-mode == max-media-query {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}), (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n    @else {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) and (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n  }\n  @else {\n    @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {\n      @content;\n    }\n  }\n}\n\n// Internal mixin that adds disable classes to the selector if needed.\n@mixin _rfs-rule {\n  @if $rfs-class == disable and $rfs-mode == max-media-query {\n    // Adding an extra class increases specificity, which prevents the media query to override the property\n    &,\n    .disable-rfs &,\n    &.disable-rfs {\n      @content;\n    }\n  }\n  @else if $rfs-class == enable and $rfs-mode == min-media-query {\n    .enable-rfs &,\n    &.enable-rfs {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n// Internal mixin that adds enable classes to the selector if needed.\n@mixin _rfs-media-query-rule {\n\n  @if $rfs-class == enable {\n    @if $rfs-mode == min-media-query {\n      @content;\n    }\n\n    @include _rfs-media-query {\n      .enable-rfs &,\n      &.enable-rfs {\n        @content;\n      }\n    }\n  }\n  @else {\n    @if $rfs-class == disable and $rfs-mode == min-media-query {\n      .disable-rfs &,\n      &.disable-rfs {\n        @content;\n      }\n    }\n    @include _rfs-media-query {\n      @content;\n    }\n  }\n}\n\n// Helper function to get the formatted non-responsive value\n@function rfs-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: '';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + ' 0';\n    }\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      @if $unit == px {\n        // Convert to rem if needed\n        $val: $val + ' ' + if($rfs-unit == rem, #{divide($value, $value * 0 + $rfs-rem-value)}rem, $value);\n      }\n      @else if $unit == rem {\n        // Convert to px if needed\n        $val: $val + ' ' + if($rfs-unit == px, #{divide($value, $value * 0 + 1) * $rfs-rem-value}px, $value);\n      }\n      @else {\n        // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n        $val: $val + ' ' + $value;\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// Helper function to get the responsive value calculated by RFS\n@function rfs-fluid-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: '';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + ' 0';\n    }\n\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n      @if not $unit or $unit != px and $unit != rem {\n        $val: $val + ' ' + $value;\n      }\n\n      @else {\n        // Remove unit from $value for calculations\n        $value: divide($value, $value * 0 + if($unit == px, 1, divide(1, $rfs-rem-value)));\n\n        // Only add the media query if the value is greater than the minimum value\n        @if abs($value) <= $rfs-base-value or not $enable-rfs {\n          $val: $val + ' ' +  if($rfs-unit == rem, #{divide($value, $rfs-rem-value)}rem, #{$value}px);\n        }\n        @else {\n          // Calculate the minimum value\n          $value-min: $rfs-base-value + divide(abs($value) - $rfs-base-value, $rfs-factor);\n\n          // Calculate difference between $value and the minimum value\n          $value-diff: abs($value) - $value-min;\n\n          // Base value formatting\n          $min-width: if($rfs-unit == rem, #{divide($value-min, $rfs-rem-value)}rem, #{$value-min}px);\n\n          // Use negative value if needed\n          $min-width: if($value < 0, -$min-width, $min-width);\n\n          // Use `vmin` if two-dimensional is enabled\n          $variable-unit: if($rfs-two-dimensional, vmin, vw);\n\n          // Calculate the variable width between 0 and $rfs-breakpoint\n          $variable-width: #{divide($value-diff * 100, $rfs-breakpoint)}#{$variable-unit};\n\n          // Return the calculated value\n          $val: $val + ' calc(' + $min-width + if($value < 0, ' - ', ' + ') + $variable-width + ')';\n        }\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// RFS mixin\n@mixin rfs($values, $property: font-size) {\n  @if $values != null {\n    $val: rfs-value($values);\n    $fluidVal: rfs-fluid-value($values);\n\n    // Do not print the media query if responsive & non-responsive values are the same\n    @if $val == $fluidVal {\n      #{$property}: $val;\n    }\n    @else {\n      @include _rfs-rule {\n        #{$property}: if($rfs-mode == max-media-query, $val, $fluidVal);\n\n        // Include safari iframe resize fix if needed\n        min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);\n      }\n\n      @include _rfs-media-query-rule {\n        #{$property}: if($rfs-mode == max-media-query, $fluidVal, $val);\n      }\n    }\n  }\n}\n\n// Shorthand helper mixins\n@mixin font-size($value) {\n  @include rfs($value);\n}\n\n@mixin padding($value) {\n  @include rfs($value, padding);\n}\n\n@mixin padding-top($value) {\n  @include rfs($value, padding-top);\n}\n\n@mixin padding-right($value) {\n  @include rfs($value, padding-right);\n}\n\n@mixin padding-bottom($value) {\n  @include rfs($value, padding-bottom);\n}\n\n@mixin padding-left($value) {\n  @include rfs($value, padding-left);\n}\n\n@mixin margin($value) {\n  @include rfs($value, margin);\n}\n\n@mixin margin-top($value) {\n  @include rfs($value, margin-top);\n}\n\n@mixin margin-right($value) {\n  @include rfs($value, margin-right);\n}\n\n@mixin margin-bottom($value) {\n  @include rfs($value, margin-bottom);\n}\n\n@mixin margin-left($value) {\n  @include rfs($value, margin-left);\n}\n","// Custom mobile style for blogapp/templates/blogapp/bottom_navbar_mobile.html\n\n@use \"../core\" as c;\n@use \"../abstracts\" as abs;\n\n/*\nRFS is a unit resizing engine which was initially developed to \nresize font sizes (hence its abbreviation for Responsive Font Sizes).\nNowadays RFS is capable of rescaling basically every value for any css \nproperty with units, like margin, padding, border-radius or even box-shadow.\n\nSource: https://www.npmjs.com/package/rfs\n */\n@import \"../../../node_modules/rfs/scss\";\n\n// bottom_navbar_mobile --> parent class\n.bottom_navbar_mobile{\n  // Hide menu on desktop-mode\n  display: none;\n  @media (max-width:768px){\n    /* display: flex;justify-content: space-around; */\n    @include abs.flex_justify_content(space-around);\n    align-items: center;\n    background-color: abs.palette(beige, base);\n    padding: 1rem 0;\n    /*\n      positioned fixed to the viewport, which means \n      it always stays in the same place even if the page is scrolled.\n      The top, right, bottom, and left properties are used to\n      position the element.\n    */\n    position: fixed;\n    bottom: 0;\n    /* makes sure the element is at least as wide as its container */\n    min-width: 100%;\n    /* add a horizontal scroll bar, when the content overflows at the\n       left and right edges. */\n    overflow-x: auto;\n    @include abs.font-type(c.$s_sans_font, c.$sbld);\n    @include font-size(1.6rem);\n\n    /* Clickable Links */\n    &__links{\n      // background-color: red;\n      @include abs.flex_center();\n      /* Changed the direction of viewport for vertical alignment of\n         flex-items */\n      flex-direction: column;\n      color: abs.p_color(true_black, base);\n      /* hover-effect */\n      @include abs.transition_support();\n      &:hover{\n        color: abs.p_color(white, base);\n      }\n      \n      /* text-links */\n      &__text{\n        text-transform: capitalize;\n      }\n    }\n  }\n}\n\n","// Custom mobile style for blogapp/templates/blogapp/bottom_navbar_mobile.html\n\n@use \"../core\" as c;\n@use \"../abstracts\" as abs;\n\n/*\nRFS is a unit resizing engine which was initially developed to \nresize font sizes (hence its abbreviation for Responsive Font Sizes).\nNowadays RFS is capable of rescaling basically every value for any css \nproperty with units, like margin, padding, border-radius or even box-shadow.\n\nSource: https://www.npmjs.com/package/rfs\n */\n@import \"../../../node_modules/rfs/scss\";\n\n//\n// SideMenu-bar style for mobile devices\n//\n@media (max-width: 768px){\n  .navbar__mid_navigation{\n    /* it always stays in the same place even if the page is scrolled */\n    position: fixed;\n    /* Stay at the top */ \n    top: 0;\n    right: 0;\n    /* Stay on top */\n    z-index: 1;\n    background-color: black;\n    display: flex;\n    flex-direction: column;\n    /* link items will have equal space around them */\n    justify-content: space-evenly;\n    /* 100% full-height */\n    height: 100%;\n    /* 0 width - change this with JavaScript */\n    min-width: 20rem;\n    /* adds scrollbars only when necessary */\n    overflow: auto;\n  }\n  \n  /* Side-menu closebtn */\n  .navbar__sidemenu_closebtn{\n    display: block;\n    /* Stay on top of overlay sidemenu */\n    z-index: 2;\n    /* absolute(below) uses the document body, and moves along with page scrolling.\n     Position the closebtn to the top-right corner.*/\n    position: absolute;\n    top: 2.5rem;\n    right: 2.5rem;\n    background: transparent;\n    cursor: pointer;\n    color: grey;\n    font-size: 2.4rem;\n    /*Animation and hover effects */\n    @include abs.transition_support();\n    &:hover{\n      color: lighten(grey, 20%);\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}